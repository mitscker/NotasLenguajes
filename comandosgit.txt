Comandos GIT:

>git clone <url>
Extrae un repositorio especifico de git

>git add <archivo/locación/todo>
Agregar y prepara los archivos para la creación de una versión

>git commit -m "<comentario>"
Sube la versión y agrega un comentario como buena practica

>git status
Verifica el status de la rama en la que se trabajando

>git show <archivo>
Te permite ver los cambios o eliminaciones de las lineas en el archivo

>git log <archivo/locación/todo>
Te hace un listado de las versiones del directorio/archivo/todo

>git log --stat <archivo/locación/todo>
Te hace un listado de las versiones del directorio/archivo/todo y ademas te hace un listado de archivos en los que te cuenta los cambios que han ocurrido en ellos

>git reset <id del commit>
Regresa todos los archivos a una version anterior

>git checkout <id del commit> <nombre de archivo>
Te permite estar en una version anterior del archivo sin tener que eliminar los commits posteriores

>git checkout master <nombre del archivo>
Te permite volver a la ultima version del archivo

>git reset HEAD
Eliminar los archivos del status Staging antes de hacer el commit

>git push(cuando hay un servidor en el cual esta el proyecto principal)
Cuando subimos los commits al servidor donde esta el proyecto principal

>git push --force <url-de-repositorio>
Sube los cambios al repositorio de manera forzada

>git branch
Te muestra un listado de las ramas en cual estas posicionado

>git branch <nombre de rama>
Con este comando se crea una nueva rama
    >git checkout <nombre de rama>
    Con el comando checkou podemos swichearnos entre las ramas y cambiar a estas

>git merge <nombre de la rama>
Agrega los cambios que han surgido en esta rama a la rama donde se ejecuta el comando

>git remote add origin <url de repositorio>
Agrega un repositorio remoto para subir nuesto proyecto, crea en nuestra locación un folder origin

>git push origin <nombre de la rama>
Este comando agregar al folder origin nuestro proyecto, el cual se reflejara en el repositorio creado en github

>git pull origin master
Trae el proyecto del repositorio a la rama master donde master es el nombre de la rama
    >git pull origin master --allow-unrelated-histories
    Permite bajar proyecto de manera forzada aunque no esten en tu equipo local

>git config -l
Te despliega la configuracion actual del git

>ssh-keygen -t rsa -b 4096 -C "<correo>"
Creacion de una llave local SSH

>git log --all --graph --decorate --oneline
Comando para ver todos los logs de una manera mas intuitiva

>alias <nombre de alias>="<comando>" [ej]= alias arbolito="git log --all --graph --decorate --oneline"
Crea un alias que es una manera facil y dinamica de ejecutar un comando

>git tag -a <nombre del tag> -m "<comentario>" <id log especifico>
Esto agrega un tag de una version especifica del proyecto

>git tag
comando para ver los tags existentes

>git push origin --tags
Con este comando subimos los tags locales a el repositorio

>git push origin :refs/tags/<nombre del tag>
Con este comando hacemos referencia a la sincronización de una eliminació para que se refleje en el servidor del repositorio

>git clone https://username:password@github.com/username/repo_name.git
Comando para clonar un repositorio privado

>git diff <nombre-de-rama>
Estando en la rama en la que queremos hacer la comparacion, el nombre de la rama que colocaremos en el comando es la otra que queremos comprar

>>>Esto lo puede usar cuando has hecho un reset --hard y has perdido el proyecto:
ejemplo del comando:
>git reset --hard origin/master
Este comando es usado para traer la ultima version del servidor de manera forzada, esto una ver lo aplique en un repositorio en blanco a un proyecto ya hecho elimino todo,
lo que me salvo fue un unico commit que había hecho antes de este comando

    1. Primero vamos vamos ejecutar el siguiente comando:

    >git reflog
    Este comando te trae los hashes de los commit, aunque se hayan eliminado puedes obtenerlos de esta manera
    Lo siguiente es una vez que tienes el codigo del commit nos posicionamos en el con un git checkout
    vamos a hacer los siguientes comandos:
    git branch <nombre-de-la-rama> <id-del-commit>
    git checkout master
    git merge <nombre-de-la-rama>
    En este caso creamos una branch temporal en la que estara nuestro proyecto recuperado,
    nos vamos a la master y despues hacemos un merge a la master para recuperar el proyecto en caso de que arroje un error por la related histories
    agregar esto al momento de hacer merge:
    --allow-unrelated-histories
    quedando de la siguiente:
    git merge <nombre-de-la-rama> --allow-unrelated-histories
