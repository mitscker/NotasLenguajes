>Que es un componente
Es un bloque de construcción

>Como identificar un componente
    ¿Que elementos se repiten?
    Estos son los elementos en una lista o los que comparten un aspecto visual y su funcionalidad
    ¿Que elementos una funcion muy especifica?
    Estos sirven para encapsular la logica y permiten juntar muchos comportamientos y aspectos visuales en un solo lugar

>Estructura basica de un componente
    // Un componente requerira obligatoriamente de un metodo render() {}
    import React from 'react'
    import logoImg from '../images/logo.png';

    class Bagde extends React.Component {
        render() {
            return <div>
                        <div>
                            <img src={logoImg} alt="logo de la conferencia" width="150" />
                        </div>

                        <div>
                            <h1>Richard Kaufman</h1>
                        </div>

                        <div>
                            <p>Front End Egineer</p>
                            <p>@sparragus</p>
                        </div>

                        <div>
                            <p>#miPrimerReact</p>
                        </div>
                    </div>
        }
    }

    export default Bagde

>Como aplicar estilos
// con un import y entre comillas la ruta del archivo css
import 'ruta-del-archivo-css'
el uso de estilos dentro de react es con el atributo de className="<nombre-de-la-clase>"

>Como agregamos bootstrap
// comando para agregar bootstrap a nuestro proyecto
npm install bootstrap
// importamos de la siguiente manera
// import y seguido la ruta del archivo de bootstrap que queremos importar
import 'ruta-del-archivo-a-importar'

>Uso del estado:
// de esta forma se captura el estado de un input (esto se realiza dento del metodo onchange)
// uno de los problemas del siguiente codigo es que los demas inputs con este mismo metodo van a guardar el valor siempre en el atributo de estado firstName
handleChange = e => {
    this.setState({
        firstName: e.target.value
    });
}
<input onChange={this.handleChange} >
// se soluciona el problema anterior de la siguiente manera, para guardar los valor en un propio atributo de estado & para esto el input tiene que tener un name definido:
// Esto hace que se instancie un estado pero con el nombre de cada input creado asi un atributo de estado por input
handleChange = e => {
    this.setState({
        [e.target.name]: e.target.value
    });
}
<input onChange={this.handleChange} name="firstName" >
<input onChange={this.handleChange} name="lastName" >
<input onChange={this.handleChange} name="email" >
// Queda un problema por resolver se estan generando dos estados y cuando la aplicacion crece esto puede crear un problema de rendimiento
// Se soluciona instanciando el state desde el inicio esto para tener una solo fuente de informacion de donde el input este guardando y sacando la información
state = {// aqui colocamos los atributos que necesitemos};
handleChange = e => {
    this.setState({
        [e.target.name]: e.target.value
    });
}
<input onChange={this.handleChange} name="firstName" >
<input onChange={this.handleChange} name="lastName" >
<input onChange={this.handleChange} name="email" >



>props
Los componentes tiene una propiedad propia llamada props(properties) y es propia de la clase

>Ciclo de vida de un componente
- Montaje: El codigo que representa react se representa en el DOM
    llama 3 metodos
    - Constructor
    - Render
    - ComponentDidMount

- Actualización: Cuando los props del componente se actualizan/cambian
    ejecuta 2 metodos
    - Render
    - ComponentDidUpdate: este metodo recibe 2 argumentos, el primero es los props que tenia anteriormente y el estado que tenia anteriormente

- Desmontaje: Cuando se desmonta el componente
    ejecuta un solo metodo
    - ComponentWillUnmount

>Introduccion a llamadas API
consta de 3 estados:
    - Loading
    - Error
    - Datos