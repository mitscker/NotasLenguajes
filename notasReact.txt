>Instalacion de create-react-app
npm install -g create-react-app

>Que es un componente
Es un bloque de construcción

>Como identificar un componente
    ¿Que elementos se repiten?
    Estos son los elementos en una lista o los que comparten un aspecto visual y su funcionalidad
    ¿Que elementos una funcion muy especifica?
    Estos sirven para encapsular la logica y permiten juntar muchos comportamientos y aspectos visuales en un solo lugar

>import React from 'react';
Esta dependencia siempre, obligatoriamente debe estar instanciada en nuestro codigo, si queremos hacer uso de codigo jsx
ejemplo:
let elemento = <h1>hello world</h1>;
podemos asignar y hacer uso de etiquetas html directamente, gracias a la dependencia 'react'

>expresiones en codigo jsx
Las expresiones son tal cual expresiones dentro de jsx estas van dentro de {} "llaves", pueden tambien ser variables o funciones.
ej:
let name = 'marlen';
let name = () => 3 + 3;
let element = <h1>Hola soy, {name}</h1>
let element = <h1>Hola soy, {2 + 2}</h1>
puede ser como se muestra un valor de una variable tal cual, una expresion o una funcion

>Estructura basica de un componente
    // Un componente requerira obligatoriamente de un metodo render() {}
    import React from 'react'
    import logoImg from '../images/logo.png';

    class Bagde extends React.Component {
        render() {
            return <div>
                        <div>
                            <img src={logoImg} alt="logo de la conferencia" width="150" />
                        </div>

                        <div>
                            <h1>Richard Kaufman</h1>
                        </div>

                        <div>
                            <p>Front End Egineer</p>
                            <p>@sparragus</p>
                        </div>

                        <div>
                            <p>#miPrimerReact</p>
                        </div>
                    </div>
        }
    }

    export default Bagde

>Como aplicar estilos
// con un import y entre comillas la ruta del archivo css
import 'ruta-del-archivo-css'
el uso de estilos dentro de react es con el atributo de className="<nombre-de-la-clase>"

>Como agregamos bootstrap
// comando para agregar bootstrap a nuestro proyecto
npm install bootstrap
// importamos de la siguiente manera
// import y seguido la ruta del archivo de bootstrap que queremos importar
import 'ruta-del-archivo-a-importar'
ejemplo: import 'bootstrap/dist/css/bootstrap.css';
esta linea es agregada al index.js global de la aplicacion

>Uso del estado:
// de esta forma se captura el estado de un input (esto se realiza dento del metodo onchange)
// uno de los problemas del siguiente codigo es que los demas inputs con este mismo metodo van a guardar el valor siempre en el atributo de estado firstName
handleChange = e => {
    this.setState({
        firstName: e.target.value
    });
}
<input onChange={this.handleChange} >
// se soluciona el problema anterior de la siguiente manera, para guardar los valor en un propio atributo de estado & para esto el input tiene que tener un name definido:
// Esto hace que se instancie un estado pero con el nombre de cada input creado asi un atributo de estado por input
handleChange = e => {
    this.setState({
        [e.target.name]: e.target.value
    });
}
<input onChange={this.handleChange} name="firstName" >
<input onChange={this.handleChange} name="lastName" >
<input onChange={this.handleChange} name="email" >
// Queda un problema por resolver se estan generando dos estados y cuando la aplicacion crece esto puede crear un problema de rendimiento
// Se soluciona instanciando el state desde el inicio esto para tener una solo fuente de informacion de donde el input este guardando y sacando la información
state = {// aqui colocamos los atributos que necesitemos};
handleChange = e => {
    this.setState({
        [e.target.name]: e.target.value
    });
}
<input onChange={this.handleChange} name="firstName" >
<input onChange={this.handleChange} name="lastName" >
<input onChange={this.handleChange} name="email" >

>Que es un levantamiento de estado
// Esto en resumen es poner el estado en una localizacion donde se le pueda pasar como props a los demas componentes


>props
Los componentes tiene una propiedad propia llamada props(properties) y es propia de la clase

>state (recomendación)
Uno de los mejores lugares para inicializar el state es en el constructor

>Ciclo de vida de un componente
- Montaje: El codigo que representa react se representa en el DOM
    llama 3 metodos
    - Constructor
    - Render
    - ComponentDidMount

- Actualización: Cuando los props del componente se actualizan/cambian
    ejecuta 2 metodos
    - Render
    - ComponentDidUpdate: este metodo recibe 2 argumentos, el primero es los props que tenia anteriormente y el estado que tenia anteriormente

- Desmontaje: Cuando se desmonta el componente
    ejecuta un solo metodo
    - ComponentWillUnmount

>Introduccion a llamadas API
consta de 3 estados:
    - Loading
    - Error
    - Datos (tiene dos variantes, datos vacio, y datos)

>Redireccionar a una pagina no encontrada
uso de Redirect, una vez importado, ejemplo:
<Route path="/404" component={NotFound}></Route>
<Redirect from="*" to="/404"></Redirect>

>Pagina de edicion, uso de un id como parametro en la url de la ruta
ejemplo:
1. estructura en route de la ruta con un identificador
<Route exact path="/badges/:badgeId/edit" component={badgeEdit}></Route>
2. en los elementos que usaremos como enlaces para ir a la ruta, este es un ejemplo de la estructura, englobados en etiqueta Link para pasar a la ruta especificada
las clases son para quitar el estilo de enlace/pasamos el id
<Link className="text-decoration-none text-reset" to={`/badges/${badge.id}/edit`}></Link>
3. para poder obtener el id se hace con el siguiente codigo, el cual puedes usar en el componentDidMount cuando llamas al get de la informacion para su despliegue
this.props.match.params.badgeId

>UI components & Container components
Buena practica de programación separar los componentes en dos:
1. Container components: componente que se encarga de la logica del componente
2. UI components: componentes que se encarguen de la presentacion de la información la vista
ContainerComponente>UIComponent

>ReactDOM.createPortal
Usado preferentemente en modales, esto porque createPortal, renderiza en un lugar aparte de la aplicacion principal
ejemplo:
import ReactDOM from 'react-dom';
// en el jsx
{ReactDOM.createPortal(#que se va a renderizar#, #donde#)}
- lo que se va a renderizar como estara fuera de la aplicacion principal que seria nuestra app, entonces tendria su propia etiqueta en el index.html
ejemplo (dentro del archivo index.html) creamos una nueva tag con el id del elemento que vamos a renderizar:
<div id="modal"></div>
- quedaria de la siguiente manera en nuestro jsx:
{ReactDOM.createPortal(<h1></h1>, document.getElementById('modal'))}

>Modal-practicamente es un createPortal, existen dos tipos:
-genericos, no tienen accion a realizar
-especializados, cumplen una funcion especifica

>componentes / componentes funcionales
los componentes se declaran de la siguiente manera:
// componentes
class NombreComponente extends React.Component() {
    render() {
        return (
            <React.Fragment></React.Fragment>
        )
    }
}
export {NombreComponente as default}
// componentes funcionales
function NombreComponente() {
    return (
        <React.Fragment></React.Fragment>
    )
}
export {NombreComponente as default}
// una de las diferencias importante entre estos es que los funcionales no contienen logica, es practicamente la vista, y que estos dada su declaracion no manejan los estados de un componente normal
